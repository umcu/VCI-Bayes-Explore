left_join(cs_1) %>%
left_join(cs_2)
df_outcomes <- df_fu_5 %>%
select(patientID, T0_datumbaselinebezoek_E1_C1, T2_datumfu2bezoek_E3_C10,
T4_datum_tel_int_E4_C12, T0_CDR_E1_C1,
T2_CDR_E3_C10, T2_CDR_E3_C11, T4_CDR_E4_C12,
T2_reden_geen_deelname_E3_C11, T4_reden_geen_deelname_E4_C12,
T0_CVA_E1_C1, T0_hartinfarct_E1_C1, T0_dotter_E1_C1,
T0_dotter_stent_E1_C1, T0_bypass_E1_C1, T0_etalagebenen_E1_C1,
T0_TIA_E1_C1,
T2_CVA_E3_C10, T2_CVA_E3_C11, T2_CVA_datum_E3_C10, T2_CVA_datum_E3_C11,
T2_CVA_type_E3_C10, T2_CVA_type_E3_C11, T2_CVA_type_overig_E3_C10,
T2_cardio_E3_C10, T2_cardio_E3_C11, T2_cardio_type_E3_C10,
T2_cardio_type_E3_C11,
T2_cardio_type_overig_E3_C10, T2_cardio_type_overig_E3_C11,
T2_cardio_datum_E3_C10, T2_cardio_datum_E3_C11,
T2_cardio_type_overig_E3_C11,
T2_1_datum_overlijden_E3_C11,T2_1_oorzaak_overlijden_E3_C11,
T4_CVA_E4_C12, T4_CVA_datum_E4_C12,T4_CVA_type_overig_E4_C12,
T4_cardio_E4_C12, T4_cardio_type_E4_C12, T4_cardio_type_overig_E4_C12,
T4_cardio_datum_E4_C12,
T4_1_datum_overlijden_E4_C12, T4_1_oorzaak_overlijden_E4_C12
)
df_outcomes <- df_outcomes %>%
mutate(
across(contains("datum"), ymd),
T4_CDR_E4_C12 = as.numeric(T4_CDR_E4_C12),
T2_CDR_E3_C10 = ifelse(is.na(T2_CDR_E3_C10), T2_CDR_E3_C11, T2_CDR_E3_C10)
) %>%
dplyr::select(-T2_CDR_E3_C11) %>%
rename(T0_CDR = T0_CDR_E1_C1, T2_CDR = T2_CDR_E3_C10,
T4_CDR = T4_CDR_E4_C12) %>%
mutate(
across(c(T4_CDR, T2_CDR), ~case_when(
. == 1 ~ 0.5,
. == 2 ~ 1,
. == 3 ~ 2,
. == 4 ~ 3,
TRUE ~ .
))
)
df_outcomes <- df_outcomes %>%
mutate(
T2_CVA = coalesce(T2_CVA_E3_C10, T2_CVA_E3_C11),
T2_CVA_type = coalesce(T2_CVA_type_E3_C10, T2_CVA_type_E3_C11),
T2_CVA_datum = coalesce(T2_CVA_datum_E3_C10, T2_CVA_datum_E3_C11),
T2_cardio = coalesce(T2_cardio_E3_C10, T2_cardio_E3_C11),
T2_cardio_type = coalesce(T2_cardio_type_E3_C10, T2_cardio_type_E3_C11),
T2_cardio_type_overig = coalesce(T2_cardio_type_overig_E3_C10,
T2_cardio_type_overig_E3_C11),
T2_cardio_datum = coalesce(T2_cardio_datum_E3_C10, T2_cardio_datum_E3_C11)
) %>%
dplyr::select(-T2_CVA_E3_C10, -T2_CVA_E3_C11,
-T2_CVA_type_E3_C10, -T2_CVA_type_E3_C11,
-T2_CVA_datum_E3_C10, -T2_CVA_datum_E3_C11,
-T2_cardio_E3_C10, -T2_cardio_E3_C11,
-T2_cardio_type_E3_C10, -T2_cardio_type_E3_C11,
-T2_cardio_type_overig_E3_C10,-T2_cardio_type_overig_E3_C11,
-T2_cardio_datum_E3_C10, -T2_cardio_datum_E3_C11
# Continue with the rest of the columns that were coalesced
) %>%
# Ensure unique column names
rename_with(~make.unique(.), .cols = everything())
names(df_outcomes) <- gsub("_E3_C10", "", names(df_outcomes))
names(df_outcomes) <- gsub("_E3_C11", "", names(df_outcomes))
names(df_outcomes) <- gsub("_E4_C12", "", names(df_outcomes))
df_outcomes$T0_CVA_E1_C1 <- as.numeric(as.character(df_outcomes$T0_CVA_E1_C1))
df_outcomes <- df_outcomes %>%
mutate(
T0_Event_Stroke = ifelse(
(T0_CVA_E1_C1==1 | T0_CVA_E1_C1==2 | T0_CVA_E1_C1==3), 1,0
),
T2_Event_Stroke = ifelse(
(T2_CVA==1 | T2_CVA==2|
grepl("CVA", T2_1_oorzaak_overlijden,
ignore.case = TRUE) |
grepl("herseninfarct", T2_1_oorzaak_overlijden,
ignore.case = TRUE) |
grepl("hersenbloeding", T2_1_oorzaak_overlijden,
ignore.case = TRUE)), 1, 0),
T4_Event_Stroke = ifelse((
T4_CVA == 1 | T4_CVA==2|
grepl("CVA", T4_1_oorzaak_overlijden, ignore.case = TRUE) |
grepl("herseninfarct", T4_1_oorzaak_overlijden,
ignore.case = TRUE)|
grepl("hersenbloeding", T4_1_oorzaak_overlijden,
ignore.case = TRUE)),1, 0),
Event_Stroke = ifelse(
T2_Event_Stroke == 1 | T4_Event_Stroke == 1,
1, 0)
)
# MACE
df_outcomes <- df_outcomes %>%
mutate(
T0_Event_MACE = case_when(
T0_CVA_E1_C1 %in% c(1, 2, 3) |
T0_hartinfarct_E1_C1 == 1 |
T0_dotter_E1_C1 == 1 |
T0_dotter_stent_E1_C1 == 1 |
T0_bypass_E1_C1 == 1 |
T0_etalagebenen_E1_C1 == 1 ~ 1,
!is.na(T0_CVA_E1_C1) | !is.na(T0_hartinfarct_E1_C1) |
!is.na(T0_dotter_E1_C1) | !is.na(T0_dotter_stent_E1_C1) |
!is.na(T0_bypass_E1_C1) | !is.na(T0_etalagebenen_E1_C1) ~ 0,
TRUE ~ NA_real_
),
T2_Event_MACE = ifelse(
(T2_CVA == 1|T2_CVA==2|T2_cardio==1|T2_cardio==2|
grepl("myocardinfarct|hersenbloeding|aneurysma",
T2_1_oorzaak_overlijden, ignore.case=TRUE)),
1, 0),
T4_Event_MACE = ifelse(
(T4_CVA == 1|T4_CVA==2|
T4_cardio==1|T4_cardio==2|
grepl("CVA|herseninfarct|vaatlijden|subarachno√Ødale|hartstilstand
|cardiac arrest|decompensatio cordis|hartfalen|
hersenbloeding|vasculaire|myocardinfarct",
T4_1_oorzaak_overlijden,
ignore.case = TRUE)),
1, 0),
OUTCOME_MACE = ifelse(
T2_Event_MACE == 1 | T4_Event_MACE == 1,
1, 0
)
)
# COGNITIVE DECLINE
df_outcomes$T2_dropout_reason <- factor(df_outcomes$T2_reden_geen_deelname,
levels = 0:5, labels = c("Untraceable",
"Deceased",
"Too Ill",
"Moved to Nursing Home",
"Refusal",
"Other"))
df_outcomes$T4_dropout_reason <- factor(df_outcomes$T4_reden_geen_deelname,
levels = 0:5,
labels = c("Untraceable",
"Deceased",
"Too Ill",
"Moved to Nursing Home",
"Refusal",
"Other"))
df_outcomes$T2_cognitive_dropout <- with(df_outcomes, T2_dropout_reason %in%
c("Moved to Nursing Home"))
df_outcomes$T4_cognitive_dropout <- with(df_outcomes, T4_dropout_reason %in%
c("Moved to Nursing Home"))
df_outcomes <- df_outcomes %>%
mutate(OUTCOME_CDR_INCREASE = ifelse(T2_CDR > T0_CDR | T4_CDR > T0_CDR | T4_CDR > T2_CDR |
T2_cognitive_dropout == TRUE |
T4_cognitive_dropout == TRUE, 1, 0)) %>%
mutate(OUTCOME_CDR_INCREASE = ifelse(
(is.na(OUTCOME_CDR_INCREASE) & (T4_CDR > T0_CDR)), 1, OUTCOME_CDR_INCREASE
),
CDR_INCR = ifelse(
(is.na(OUTCOME_CDR_INCREASE) & (T2_CDR > T0_CDR)), 1, OUTCOME_CDR_INCREASE
)
)
df_outcomes_sub <- df_outcomes %>%
select(patientID, T0_CDR, OUTCOME_MACE, OUTCOME_CDR_INCREASE)
df_outcomes <- df_outcomes %>%
mutate(
T2_dropout_reason = as.character(T2_dropout_reason),
T4_dropout_reason = as.character(T4_dropout_reason)
) %>%
mutate(
T2_dropout_reason = coalesce(T2_dropout_reason, "No dropout"),
T4_dropout_reason = coalesce(T4_dropout_reason, "No dropout")
) %>%
mutate(
T2_dropout_reason = factor(T2_dropout_reason,
levels = c(levels(df_outcomes$T2_dropout_reason),
"No dropout")),
T4_dropout_reason = factor(T4_dropout_reason,
levels = c(levels(df_outcomes$T4_dropout_reason),
"No dropout"))
)
df_sankey <- df_outcomes %>%
make_long(T0_CDR, T2_dropout_reason, T2_CDR,T4_dropout_reason, T4_CDR)
df_clean <- df_outcomes %>%
mutate(
T0_CDR = factor(T0_CDR),
T2_dropout_reason = factor(T2_dropout_reason),
T2_CDR = factor(T2_CDR),
T4_dropout_reason = factor(T4_dropout_reason),
T4_CDR = factor(T4_CDR)
)
# Helper function to reorder factor levels based on frequencies
reorder_levels_by_freq <- function(df, vars) {
df_clean %>%
mutate(across(all_of(vars), ~ fct_infreq(as.factor(.x))))
}
df_clean <- reorder_levels_by_freq(
df_clean,
vars = c("T0_CDR", "T2_dropout_reason", "T2_CDR", "T4_dropout_reason", "T4_CDR")
)
# Lump small categories first
df_clean <- df_clean %>%
mutate(
T0_CDR = factor(T0_CDR, levels = c("0", "0.5", "1", "2", "3")),
#T2_dropout_reason = fct_lump_min(factor(T2_dropout_reason), min = 10),
T2_CDR = factor(T2_CDR, levels = c("0", "0.5", "1", "2", "3")),
#T4_dropout_reason = fct_lump_min(factor(T4_dropout_reason), min = 10),
T4_CDR = factor(T4_CDR, levels = c("0", "0.5", "1", "2", "3"))
)
# Aggregate similar paths
df_aggregated <- df_clean %>%
group_by(T0_CDR, T2_dropout_reason, T2_CDR, T4_dropout_reason, T4_CDR) %>%
summarise(count = n(), .groups = 'drop')  %>%
filter(count >= 5)   # Keep only paths with at least 5 patients
# Now expand back into repeated rows for plotting
df_plot <- df_aggregated %>%
uncount(count)
colors <- c(
"#1B0C41",
"#781C6D",
"#F1605D"
)
# Now plot
p <- alluvial_wide(
df_plot,
fill_by = 'first_variable',
NA_label = 'Missing',
col_vector_flow = colors,
col_vector_value = colors
)
p +
theme_minimal() +
theme(
legend.position = "none",
plot.title = element_text(hjust = .5),
axis.text.y = element_text(size = 8)
) +
ggtitle("Clinical Dementia Rating (CDR) shift over time") +
#scale_fill_viridis_d(option = "F", alpha = 0.95) +
guides(fill = guide_legend(override.aes = list(size = 30)))  # Thicker lines
df_sankey <- df_outcomes %>%
make_long(T0_Event_MACE, T2_dropout_reason, T2_Event_MACE,
T4_dropout_reason, T4_Event_MACE)
df_clean <- df_outcomes %>%
mutate(
T0_Event_MACE = factor(T0_Event_MACE),
T2_dropout_reason = factor(T2_dropout_reason),
T2_Event_MACE = factor(T2_Event_MACE),
T4_dropout_reason = factor(T4_dropout_reason),
T4_Event_MACE = factor(T4_Event_MACE)
)
# Helper function to reorder factor levels based on frequencies
reorder_levels_by_freq <- function(df, vars) {
df_clean %>%
mutate(across(all_of(vars), ~ fct_infreq(as.factor(.x))))
}
df_clean <- reorder_levels_by_freq(
df_clean,
vars = c("T0_Event_MACE", "T2_dropout_reason", "T2_Event_MACE",
"T4_dropout_reason", "T4_Event_MACE")
)
# Aggregate similar paths
df_aggregated <- df_clean %>%
group_by(T0_Event_MACE, T2_dropout_reason, T2_Event_MACE,
T4_dropout_reason, T4_Event_MACE) %>%
summarise(count = n(), .groups = 'drop')  %>%
filter(count >= 5)   # Keep only paths with at least 5 patients
# Now expand back into repeated rows for plotting
df_plot <- df_aggregated %>%
uncount(count)
colors <- c(
"#1B0C41",
"#781C6D",
"#F1605D"
)
# Now plot
p <- alluvial_wide(
df_plot,
fill_by = 'first_variable',
NA_label = 'Missing',
col_vector_flow = colors,
col_vector_value = colors
)
p +
theme_minimal() +
theme(
legend.position = "none",
plot.title = element_text(hjust = .5),
axis.text.y = element_text(size = 8)
) +
ggtitle("Major Adverse Cardiovascular Events (MACE) over time") +
#scale_fill_viridis_d(option = "F", alpha = 0.95) +
guides(fill = guide_legend(override.aes = list(size = 30)))  # Thicker lines
saveRDS(df_outcomes,"./data/outcomes_meta.RDS")
df_outcomes$T2_dropout_reason <- as.character(df_outcomes$T2_dropout_reason)
df_outcomes$T4_dropout_reason <- as.character(df_outcomes$T4_dropout_reason)
df_outcomes <- df_outcomes %>%
mutate(OUTCOME_CDR_INCREASE = ifelse(OUTCOME_CDR_INCREASE == "0", "No",
OUTCOME_CDR_INCREASE),
OUTCOME_CDR_INCREASE = ifelse(OUTCOME_CDR_INCREASE == "1", "Yes",
OUTCOME_CDR_INCREASE),
OUTCOME_CDR_INCREASE = ifelse(is.na(OUTCOME_CDR_INCREASE), "Unobserved",
OUTCOME_CDR_INCREASE))
df_outcomes <- df_outcomes %>%
mutate(OUTCOME_MACE = ifelse(OUTCOME_MACE == "0", "No",
OUTCOME_MACE),
OUTCOME_MACE = ifelse(OUTCOME_MACE == "1", "Yes",
OUTCOME_MACE),
OUTCOME_MACE = ifelse(is.na(OUTCOME_MACE), "Unobserved",
OUTCOME_MACE))
df_outcomes <- df_outcomes %>%
mutate(
T4_dropout_reason = case_when(
T4_dropout_reason == "No dropout" & OUTCOME_CDR_INCREASE == "Unobserved" ~ T2_dropout_reason,
T4_dropout_reason == "No dropout" & OUTCOME_MACE == "Unobserved" ~ T2_dropout_reason,
TRUE ~ T4_dropout_reason
)
)
# Fill missing OUTCOME_CDR_INCREASE with T4_dropout_reason
df_outcomes_sub <- df_outcomes %>%
select(patientID, T4_dropout_reason, OUTCOME_MACE, OUTCOME_CDR_INCREASE)
saveRDS(df_outcomes_sub,"./data/outcomes.RDS")
bn_vars <- read_excel("/Users/loverma2/Library/CloudStorage/OneDrive-UMCUtrecht/BAYESIAN_NETWORK/HBC_CODEBOOK_LABELS.xlsx", sheet = "Items")
View(df_outcomes)
bn_vars_filter <- bn_vars %>%
filter(!is.na(LAYER)) %>%
select(LAYER, `VARIABLE NAME`)
# Example: manual extra variables you want to include
extra_vars <- c("patientID", "T0_patientengroep_E1_C1", "Sex", "T0_Age",
"T0_pTau181", "T0_NfL", "T0_GFAP", "T0_AŒ≤40", "T0_AŒ≤42")
# 1. Get the variable names from df_bl
all_cols <- names(df_fu_5)
# 2. Remove suffix like _E1_C1 to get base names
# (Assuming suffix always follows pattern: _E<number>_C<number>)
base_names <- sub("_E[0-9]+_C[0-9]+$", "", all_cols)
# 3. Keep columns whose base names are in bn_vars$VARIABLE_NAME
matched_cols <- all_cols[base_names %in% bn_vars_filter$`VARIABLE NAME`]
# 4. Add extra columns manually
final_cols <- unique(c(extra_vars, matched_cols))
# 5. Subset the original dataframe
df_subset <- df_fu_5[, final_cols, drop = FALSE]
# Create features
df_subset <- df_subset %>%
mutate(T0_SYS_BP = (T0_systolisch_a_E1_C1 + T0_systolisch_b_E1_C1) / 2,
T0_DIAS_BP = (T0_Diastolisch_a_E1_C1 + T0_Diastolisch_b_E1_C1) / 2,
T0_HV_ICV = ((T0_i_ic_gm_Hippocampus_left_volume_ml +
T0_i_ic_gm_Hippocampus_right_volume_ml) /
T0_q_ic_tissue_total_intracranial_volume_ml) * 100,
T0_TBV_ICV = (T0_q_ic_tissue_total_brain_volume_ml /
T0_q_ic_tissue_total_intracranial_volume_ml) *100,
T0_CBF =  T0_i_ic_cbf_GrayMatter_mean_mL100gmin,
T0_roken_hoeveel_jaar_a_E1_C1 = ifelse(is.na(T0_roken_hoeveel_jaar_a_E1_C1) &
!is.na(T0_roken_hoeveel_jaar_b_E1_C1),
T0_roken_hoeveel_jaar_b_E1_C1,
T0_roken_hoeveel_jaar_a_E1_C1),
T0_roken_hoeveel_jaar_a_E1_C1 = ifelse(is.na(T0_roken_hoeveel_jaar_a_E1_C1),
0, T0_roken_hoeveel_jaar_a_E1_C1),
T0_roken_hoeveel_per_dag_a_E1_C1 = ifelse(is.na(T0_roken_hoeveel_per_dag_a_E1_C1) &
!is.na(T0_roken_hoeveel_per_dag_b_E1_C1),
T0_roken_hoeveel_per_dag_b_E1_C1,
T0_roken_hoeveel_per_dag_a_E1_C1),
T0_roken_hoeveel_per_dag_a_E1_C1 = ifelse(is.na(T0_roken_hoeveel_per_dag_a_E1_C1),
0, T0_roken_hoeveel_per_dag_a_E1_C1),
T0_CAD = ifelse((T0_bypass_E1_C1==1 | T0_dotter_E1_C1==1 | T0_hartinfarct_E1_C1 ==1), 1, 0),
T0_PAD = ifelse((T0_etalagebenen_E1_C1 == 1), 1, 0)) %>%
select(-T0_roken_hoeveel_jaar_b_E1_C1, -T0_roken_hoeveel_per_dag_b_E1_C1,
-T0_etalagebenen_E1_C1, -T0_hartinfarct_E1_C1, -T0_bypass_E1_C1,
-T0_dotter_E1_C1)
df_subset <- df_subset %>%
mutate(MACE = ifelse(T0_CAD==1 | T0_PAD==1, 1, 0))
df_subset <- df_subset %>%
select(-T0_PAD, -T0_CAD)
# ---------------------------------------------------------------------------- #
df_final <- df_subset %>%
left_join(df_outcomes_sub)
bn_vars_filter$`VARIABLE NAME` <- gsub("T0_", "",
bn_vars_filter$`VARIABLE NAME`)
names(df_final) <- gsub("_E1_C1", "", names(df_final))
names(df_final) <- gsub("_E1_C6", "", names(df_final))
names(df_final) <- gsub("T0_", "", names(df_final))
names(df_final) <- gsub("Œ≤", "B", names(df_final))
names(df_final) <- toupper(names(df_final))
bn_vars_filter$`VARIABLE NAME` <- toupper(bn_vars_filter$`VARIABLE NAME`)
bn_vars_filter <- bn_vars_filter %>%
add_row(LAYER='L2 ‚Äì Cardiovascular risk factors',
`VARIABLE NAME`="SYS_BP") %>%
add_row(LAYER='L2 ‚Äì Cardiovascular risk factors',
`VARIABLE NAME`="DIAS_BP") %>%
add_row(LAYER='L5 - Imaging markers of neurovascular damage',
`VARIABLE NAME`="HV_ICV") %>%
add_row(LAYER='L5 - Imaging markers of neurovascular damage',
`VARIABLE NAME`="TBV_ICV") %>%
add_row(LAYER='L4 ‚Äì Potential disease process markers',
`VARIABLE NAME`="CBF") %>%
add_row(LAYER='L8 ‚Äì Outcomes',
`VARIABLE NAME`="OUTCOME_CDR_INCREASE") %>%
add_row(LAYER='L8 ‚Äì Outcomes',
`VARIABLE NAME`="T4_DROPOUT_REASON") %>%
add_row(LAYER='L8 ‚Äì Outcomes',
`VARIABLE NAME`="OUTCOME_MACE") %>%
add_row(LAYER="L0 ‚Äì Unmodifiable demographics",
`VARIABLE NAME`="AGE") %>%
add_row(LAYER="L0 ‚Äì Unmodifiable demographics",
`VARIABLE NAME`="SEX") %>%
add_row(LAYER="L4 ‚Äì Potential disease process markers",
`VARIABLE NAME`="PTAU181") %>%
add_row(LAYER="L4 ‚Äì Potential disease process markers",
`VARIABLE NAME`="NFL") %>%
add_row(LAYER="L4 ‚Äì Potential disease process markers",
`VARIABLE NAME`="GFAP") %>%
add_row(LAYER="L6 ‚Äì Current and previous cardiovascular diagnoses / Vascular interventions",
`VARIABLE NAME`="PATIENTENGROEP") %>%
add_row(LAYER="L4 ‚Äì Potential disease process markers",
`VARIABLE NAME`="AB40")%>%
add_row(LAYER="L4 ‚Äì Potential disease process markers",
`VARIABLE NAME`="AB42")%>%
add_row(LAYER="L6 ‚Äì Current and previous cardiovascular diagnoses / Vascular interventions",
`VARIABLE NAME`="MACE") %>%
add_row(LAYER="L2 ‚Äì Cardiovascular risk factors",
`VARIABLE NAME`="SCORE_2")
# Convert all haven-labelled variables to factors
df_clean <- df_final %>%
mutate(across(where(haven::is.labelled), haven::as_factor))
names(df_clean) <- gsub("Œ≤", "B", names(df_clean))
df_clean <- df_clean %>%
mutate(across(
where(is.factor),
~ factor(str_to_sentence(as.character(.)))
))
df_clean$NEURORAD_SVD_SCORE <-
as.factor(df_clean$NEURORAD_SVD_SCORE)
df_clean$CDR <- as.factor(df_clean$CDR)
df_clean <- df_clean %>%
select(-Q_IC_TISSUE_TOTAL_INTRACRANIAL_VOLUME_ML,
-Q_IC_TISSUE_TOTAL_BRAIN_VOLUME_ML,
-I_IC_CBF_GRAYMATTER_MEAN_ML100GMIN,
-DIASTOLISCH_A,
-DIASTOLISCH_B,
-SYSTOLISCH_A,
-SYSTOLISCH_B)
df_clean <- df_clean %>%
select(-PATIENTID)
df_clean_score <- df_clean %>%
mutate(
SEX_SCORE = ifelse(is.na(SEX), NA, ifelse(SEX == "Female", "female", "male")),
ROKEN_SCORE = ifelse(is.na(ROKEN), NA, ifelse(ROKEN == "Ja", 1, 0)),
DIABETES_SCORE = ifelse(is.na(DIABETES), NA, ifelse(DIABETES == "Nee", 0, 1))
)
df_clean_score <- df_clean_score %>%
rowwise() %>%
mutate(SCORE_2 = SCORE2(
Risk.region = "Low",
Age = AGE,
Gender = SEX_SCORE,
smoker = ROKEN_SCORE,
systolic.bp = SYS_BP,
diabetes = DIABETES_SCORE,
total.chol = CHOLESTEROL_TOTAAL,
total.hdl = CHOLESTEROL_HDL,
classify = FALSE
)) %>%
ungroup()
View(df_clean_score)
install.packages("table1")
library(table1)
table1(~AGE, SEX_SCORE, NEURORAD_SVD_SCORE, SYS_BP, TIA, DIABETES_SCORE, df_clean_score)
table1(~AGE, SEX_SCORE, SYS_BP, TIA,
DIABETES_SCORE, df_clean_score)
df_clean_score <- df_clean_score %>%
rowwise() %>%
mutate(SCORE_2 = SCORE2(
Risk.region = "Low",
Age = AGE,
Gender = SEX_SCORE,
smoker = ROKEN_SCORE,
systolic.bp = SYS_BP,
diabetes = DIABETES_SCORE,
total.chol = CHOLESTEROL_TOTAAL,
total.hdl = CHOLESTEROL_HDL,
classify = FALSE
)) %>%
ungroup()
table1(~AGE, SEX_SCORE, SYS_BP, TIA,
DIABETES_SCORE, df_clean_score)
table1(~AGE + SEX_SCORE + SYS_BP + TIA,
DIABETES_SCORE, df_clean_score)
table1(~AGE + SYS_BP + TIA,
DIABETES_SCORE, df_clean_score | SEX_SCORE)
table1(~AGE + SYS_BP + TIA,
DIABETES_SCORE | SEX_SCORE, df_clean_score)
library(tableone)
vars <- c("AGE", "SEX", "ROKEN_SCORE", "SYS_BP", "BLOEDDRUK_MEDICATIE")
tableOne <- CreateTableOne(vars = vars, data = df_clean_score)
tableOne
print(tableOne, nonnormal = c("AGE","SYS_BP"),
exact = c("SEX","ROKEN_SCORE", "BLOEDDRUK_MEDICATIE"), smd = TRUE)
View(df_clean_score)
vars <- c("AGE", "SEX", "DIABETES", "ROKEN","SYS_BP", "BLOEDDRUK_MEDICATIE")
tableOne <- CreateTableOne(vars = vars, data = df_clean_score)
print(tableOne, nonnormal = c("AGE","SYS_BP"),
exact = c("SEX","ROKEN_SCORE", "BLOEDDRUK_MEDICATIE"), smd = TRUE)
View(df_clean_score)
vars <- c("AGE", "SEX", "DIABETES", "ROKEN","SYS_BP", "CHOLESTEROL_LDL",
"BLOEDDRUK_MEDICATIE", "TIA", "CVA", "PATIENTENGROEP")
tableOne <- CreateTableOne(vars = vars, data = df_clean_score)
print(tableOne, nonnormal = c("AGE","SYS_BP"),
exact = c("SEX","ROKEN_SCORE", "BLOEDDRUK_MEDICATIE",
"TIA", "CVA", "PATIENTENGROEP"), smd = TRUE)
vars <- c("AGE", "SEX", "DIABETES", "ROKEN","SYS_BP", "CHOLESTEROL_LDL",
"SCORE_2","BLOEDDRUK_MEDICATIE", "TIA", "CVA", "PATIENTENGROEP")
tableOne <- CreateTableOne(vars = vars, data = df_clean_score)
print(tableOne, nonnormal = c("AGE","SYS_BP", "CHOLESTEROL_LDL", "SCORE_2"),
exact = c("SEX","ROKEN_SCORE", "BLOEDDRUK_MEDICATIE",
"TIA", "CVA", "PATIENTENGROEP"), smd = TRUE)
print(tableOne, nonnormal = c("AGE","SYS_BP", "CHOLESTEROL_LDL", "SCORE_2"),
exact = c("SEX","ROKEN_SCORE", "BLOEDDRUK_MEDICATIE",
"TIA", "CVA", "PATIENTENGROEP"), smd = TRUE,
quote=TRUE)
